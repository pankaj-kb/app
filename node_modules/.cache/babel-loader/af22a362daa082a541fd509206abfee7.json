{"ast":null,"code":"import { Tweet } from '@/models';\nimport bs58 from 'bs58';\nexport const fetchTweets = async ({\n  program\n}, filters = []) => {\n  const tweets = await program.value.account.tweet.all(filters);\n  return tweets.map(tweet => new Tweet(tweet.publicKey, tweet.account));\n};\nexport const authorFilter = authorBase58PublicKey => ({\n  memcmp: {\n    offset: 8,\n    // Discriminator.\n    bytes: authorBase58PublicKey\n  }\n});\nexport const topicFilter = topic => ({\n  memcmp: {\n    offset: 8 + // Discriminator.\n    32 + // Author public key.\n    8 + // Timestamp.\n    4,\n    // Topic string prefix.\n    bytes: bs58.encode(Buffer.from(topic))\n  }\n});","map":{"version":3,"sources":["/home/magma/solana-twitter/app/src/api/fetch-tweets.js"],"names":["Tweet","bs58","fetchTweets","program","filters","tweets","value","account","tweet","all","map","publicKey","authorFilter","authorBase58PublicKey","memcmp","offset","bytes","topicFilter","topic","encode","Buffer","from"],"mappings":"AAAA,SAASA,KAAT,QAAsB,UAAtB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,OAAO,MAAMC,WAAW,GAAG,OAAO;AAAEC,EAAAA;AAAF,CAAP,EAAoBC,OAAO,GAAG,EAA9B,KAAqC;AAC5D,QAAMC,MAAM,GAAG,MAAMF,OAAO,CAACG,KAAR,CAAcC,OAAd,CAAsBC,KAAtB,CAA4BC,GAA5B,CAAgCL,OAAhC,CAArB;AACA,SAAOC,MAAM,CAACK,GAAP,CAAWF,KAAK,IAAI,IAAIR,KAAJ,CAAUQ,KAAK,CAACG,SAAhB,EAA2BH,KAAK,CAACD,OAAjC,CAApB,CAAP;AACH,CAHM;AAKP,OAAO,MAAMK,YAAY,GAAGC,qBAAqB,KAAK;AAClDC,EAAAA,MAAM,EAAE;AACJC,IAAAA,MAAM,EAAE,CADJ;AACO;AACXC,IAAAA,KAAK,EAAEH;AAFH;AAD0C,CAAL,CAA1C;AAOP,OAAO,MAAMI,WAAW,GAAGC,KAAK,KAAK;AACjCJ,EAAAA,MAAM,EAAE;AACJC,IAAAA,MAAM,EAAE,IAAI;AACR,MADI,GACC;AACL,KAFI,GAEA;AACJ,KAJA;AAIG;AACPC,IAAAA,KAAK,EAAEf,IAAI,CAACkB,MAAL,CAAYC,MAAM,CAACC,IAAP,CAAYH,KAAZ,CAAZ;AALH;AADyB,CAAL,CAAzB","sourcesContent":["import { Tweet } from '@/models'\nimport bs58 from 'bs58'\n\nexport const fetchTweets = async ({ program }, filters = []) => {\n    const tweets = await program.value.account.tweet.all(filters);\n    return tweets.map(tweet => new Tweet(tweet.publicKey, tweet.account))\n}\n\nexport const authorFilter = authorBase58PublicKey => ({\n    memcmp: {\n        offset: 8, // Discriminator.\n        bytes: authorBase58PublicKey,\n    }\n})\n\nexport const topicFilter = topic => ({\n    memcmp: {\n        offset: 8 + // Discriminator.\n            32 + // Author public key.\n            8 + // Timestamp.\n            4, // Topic string prefix.\n        bytes: bs58.encode(Buffer.from(topic)),\n    }\n})"]},"metadata":{},"sourceType":"module"}