{"ast":null,"code":"import { web3 } from '@project-serum/anchor';\nimport { Tweet } from '@/models'; // 1. Define the sendTweet endpoint.\n\nexport const sendTweet = async ({\n  wallet,\n  program\n}, topic, content) => {\n  // 2. Generate a new Keypair for our new tweet account.\n  const tweet = web3.Keypair.generate(); // 3. Send a \"SendTweet\" instruction with the right data and the right accounts.\n\n  await program.value.rpc.sendTweet(topic, content, {\n    accounts: {\n      author: wallet.value.publicKey,\n      tweet: tweet.publicKey,\n      systemProgram: web3.SystemProgram.programId\n    },\n    signers: [tweet]\n  }); // 4. Fetch the newly created account from the blockchain.\n\n  const tweetAccount = await program.value.account.tweet.fetch(tweet.publicKey); // 5. Wrap the fetched account in a Tweet model so our frontend can display it.\n\n  return new Tweet(tweet.publicKey, tweetAccount);\n};","map":{"version":3,"sources":["/home/magma/solana-twitter/app/src/api/send-tweet.js"],"names":["web3","Tweet","sendTweet","wallet","program","topic","content","tweet","Keypair","generate","value","rpc","accounts","author","publicKey","systemProgram","SystemProgram","programId","signers","tweetAccount","account","fetch"],"mappings":"AAAA,SAASA,IAAT,QAAqB,uBAArB;AACA,SAASC,KAAT,QAAsB,UAAtB,C,CAEA;;AACA,OAAO,MAAMC,SAAS,GAAG,OAAO;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAP,EAA4BC,KAA5B,EAAmCC,OAAnC,KAA+C;AAErE;AACC,QAAMC,KAAK,GAAGP,IAAI,CAACQ,OAAL,CAAaC,QAAb,EAAd,CAHoE,CAKpE;;AACA,QAAML,OAAO,CAACM,KAAR,CAAcC,GAAd,CAAkBT,SAAlB,CAA4BG,KAA5B,EAAmCC,OAAnC,EAA4C;AAC9CM,IAAAA,QAAQ,EAAE;AACNC,MAAAA,MAAM,EAAEV,MAAM,CAACO,KAAP,CAAaI,SADf;AAENP,MAAAA,KAAK,EAAEA,KAAK,CAACO,SAFP;AAGNC,MAAAA,aAAa,EAAEf,IAAI,CAACgB,aAAL,CAAmBC;AAH5B,KADoC;AAM9CC,IAAAA,OAAO,EAAE,CAACX,KAAD;AANqC,GAA5C,CAAN,CANoE,CAepE;;AACA,QAAMY,YAAY,GAAG,MAAMf,OAAO,CAACM,KAAR,CAAcU,OAAd,CAAsBb,KAAtB,CAA4Bc,KAA5B,CAAkCd,KAAK,CAACO,SAAxC,CAA3B,CAhBoE,CAkBpE;;AACA,SAAO,IAAIb,KAAJ,CAAUM,KAAK,CAACO,SAAhB,EAA2BK,YAA3B,CAAP;AACH,CApBM","sourcesContent":["import { web3 } from '@project-serum/anchor'\nimport { Tweet } from '@/models'\n\n// 1. Define the sendTweet endpoint.\nexport const sendTweet = async ({ wallet, program }, topic, content) => {\n  \n  \t// 2. Generate a new Keypair for our new tweet account.\n    const tweet = web3.Keypair.generate()\n\n    // 3. Send a \"SendTweet\" instruction with the right data and the right accounts.\n    await program.value.rpc.sendTweet(topic, content, {\n        accounts: {\n            author: wallet.value.publicKey,\n            tweet: tweet.publicKey,\n            systemProgram: web3.SystemProgram.programId,\n        },\n        signers: [tweet]\n    })\n\n    // 4. Fetch the newly created account from the blockchain.\n    const tweetAccount = await program.value.account.tweet.fetch(tweet.publicKey)\n    \n    // 5. Wrap the fetched account in a Tweet model so our frontend can display it.\n    return new Tweet(tweet.publicKey, tweetAccount)\n}"]},"metadata":{},"sourceType":"module"}