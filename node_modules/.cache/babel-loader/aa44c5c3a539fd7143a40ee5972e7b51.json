{"ast":null,"code":"/**\n * returns true if the given object is a promise\n */\nexport function isPromise(obj) {\n  if (obj && typeof obj.then === 'function') {\n    return true;\n  } else {\n    return false;\n  }\n}\nexport var PROMISE_RESOLVED_FALSE = Promise.resolve(false);\nexport var PROMISE_RESOLVED_TRUE = Promise.resolve(true);\nexport var PROMISE_RESOLVED_VOID = Promise.resolve();\nexport function sleep(time, resolveWith) {\n  if (!time) time = 0;\n  return new Promise(function (res) {\n    return setTimeout(function () {\n      return res(resolveWith);\n    }, time);\n  });\n}\nexport function randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n/**\n * https://stackoverflow.com/a/8084248\n */\n\nexport function randomToken() {\n  return Math.random().toString(36).substring(2);\n}\nvar lastMs = 0;\nvar additional = 0;\n/**\n * returns the current time in micro-seconds,\n * WARNING: This is a pseudo-function\n * Performance.now is not reliable in webworkers, so we just make sure to never return the same time.\n * This is enough in browsers, and this function will not be used in nodejs.\n * The main reason for this hack is to ensure that BroadcastChannel behaves equal to production when it is used in fast-running unit tests.\n */\n\nexport function microSeconds() {\n  var ms = new Date().getTime();\n\n  if (ms === lastMs) {\n    additional++;\n    return ms * 1000 + additional;\n  } else {\n    lastMs = ms;\n    additional = 0;\n    return ms * 1000;\n  }\n}\n/**\n * copied from the 'detect-node' npm module\n * We cannot use the module directly because it causes problems with rollup\n * @link https://github.com/iliakan/detect-node/blob/master/index.js\n */\n\nexport var isNode = Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';","map":{"version":3,"sources":["/home/magma/solana-twitter/app/node_modules/broadcast-channel/dist/esbrowser/util.js"],"names":["isPromise","obj","then","PROMISE_RESOLVED_FALSE","Promise","resolve","PROMISE_RESOLVED_TRUE","PROMISE_RESOLVED_VOID","sleep","time","resolveWith","res","setTimeout","randomInt","min","max","Math","floor","random","randomToken","toString","substring","lastMs","additional","microSeconds","ms","Date","getTime","isNode","Object","prototype","call","process"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,SAASA,SAAT,CAAmBC,GAAnB,EAAwB;AAC7B,MAAIA,GAAG,IAAI,OAAOA,GAAG,CAACC,IAAX,KAAoB,UAA/B,EAA2C;AACzC,WAAO,IAAP;AACD,GAFD,MAEO;AACL,WAAO,KAAP;AACD;AACF;AACD,OAAO,IAAIC,sBAAsB,GAAGC,OAAO,CAACC,OAAR,CAAgB,KAAhB,CAA7B;AACP,OAAO,IAAIC,qBAAqB,GAAGF,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAA5B;AACP,OAAO,IAAIE,qBAAqB,GAAGH,OAAO,CAACC,OAAR,EAA5B;AACP,OAAO,SAASG,KAAT,CAAeC,IAAf,EAAqBC,WAArB,EAAkC;AACvC,MAAI,CAACD,IAAL,EAAWA,IAAI,GAAG,CAAP;AACX,SAAO,IAAIL,OAAJ,CAAY,UAAUO,GAAV,EAAe;AAChC,WAAOC,UAAU,CAAC,YAAY;AAC5B,aAAOD,GAAG,CAACD,WAAD,CAAV;AACD,KAFgB,EAEdD,IAFc,CAAjB;AAGD,GAJM,CAAP;AAKD;AACD,OAAO,SAASI,SAAT,CAAmBC,GAAnB,EAAwBC,GAAxB,EAA6B;AAClC,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACD;AACD;AACA;AACA;;AAEA,OAAO,SAASK,WAAT,GAAuB;AAC5B,SAAOH,IAAI,CAACE,MAAL,GAAcE,QAAd,CAAuB,EAAvB,EAA2BC,SAA3B,CAAqC,CAArC,CAAP;AACD;AACD,IAAIC,MAAM,GAAG,CAAb;AACA,IAAIC,UAAU,GAAG,CAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,YAAT,GAAwB;AAC7B,MAAIC,EAAE,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAT;;AAEA,MAAIF,EAAE,KAAKH,MAAX,EAAmB;AACjBC,IAAAA,UAAU;AACV,WAAOE,EAAE,GAAG,IAAL,GAAYF,UAAnB;AACD,GAHD,MAGO;AACLD,IAAAA,MAAM,GAAGG,EAAT;AACAF,IAAAA,UAAU,GAAG,CAAb;AACA,WAAOE,EAAE,GAAG,IAAZ;AACD;AACF;AACD;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIG,MAAM,GAAGC,MAAM,CAACC,SAAP,CAAiBV,QAAjB,CAA0BW,IAA1B,CAA+B,OAAOC,OAAP,KAAmB,WAAnB,GAAiCA,OAAjC,GAA2C,CAA1E,MAAiF,kBAA9F","sourcesContent":["/**\n * returns true if the given object is a promise\n */\nexport function isPromise(obj) {\n  if (obj && typeof obj.then === 'function') {\n    return true;\n  } else {\n    return false;\n  }\n}\nexport var PROMISE_RESOLVED_FALSE = Promise.resolve(false);\nexport var PROMISE_RESOLVED_TRUE = Promise.resolve(true);\nexport var PROMISE_RESOLVED_VOID = Promise.resolve();\nexport function sleep(time, resolveWith) {\n  if (!time) time = 0;\n  return new Promise(function (res) {\n    return setTimeout(function () {\n      return res(resolveWith);\n    }, time);\n  });\n}\nexport function randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n/**\n * https://stackoverflow.com/a/8084248\n */\n\nexport function randomToken() {\n  return Math.random().toString(36).substring(2);\n}\nvar lastMs = 0;\nvar additional = 0;\n/**\n * returns the current time in micro-seconds,\n * WARNING: This is a pseudo-function\n * Performance.now is not reliable in webworkers, so we just make sure to never return the same time.\n * This is enough in browsers, and this function will not be used in nodejs.\n * The main reason for this hack is to ensure that BroadcastChannel behaves equal to production when it is used in fast-running unit tests.\n */\n\nexport function microSeconds() {\n  var ms = new Date().getTime();\n\n  if (ms === lastMs) {\n    additional++;\n    return ms * 1000 + additional;\n  } else {\n    lastMs = ms;\n    additional = 0;\n    return ms * 1000;\n  }\n}\n/**\n * copied from the 'detect-node' npm module\n * We cannot use the module directly because it causes problems with rollup\n * @link https://github.com/iliakan/detect-node/blob/master/index.js\n */\n\nexport var isNode = Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';"]},"metadata":{},"sourceType":"module"}