{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { BaseSignerWalletAdapter, WalletAccountError, WalletDisconnectedError, WalletNotConnectedError, WalletNotReadyError, WalletPublicKeyError, WalletSignTransactionError } from '@solana/wallet-adapter-base';\nimport { PublicKey } from '@solana/web3.js';\nexport class MathWalletAdapter extends BaseSignerWalletAdapter {\n  constructor(config = {}) {\n    super();\n\n    this._messaged = event => {\n      const data = event.data;\n\n      if (data && data.origin === 'mathwallet_internal' && data.type === 'lockStatusChanged' && !data.payload) {\n        this._disconnected();\n      }\n    };\n\n    this._disconnected = () => {\n      if (this._wallet) {\n        window.removeEventListener('message', this._messaged);\n        this._wallet = null;\n        this._publicKey = null;\n        this.emit('error', new WalletDisconnectedError());\n        this.emit('disconnect');\n      }\n    };\n\n    this._connecting = false;\n    this._wallet = null;\n    this._publicKey = null;\n  }\n\n  get publicKey() {\n    return this._publicKey;\n  }\n\n  get connecting() {\n    return this._connecting;\n  }\n\n  ready() {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      if (typeof window === 'undefined' || typeof document === 'undefined') return false;\n      if (document.readyState === 'complete') return !!((_a = window.solana) === null || _a === void 0 ? void 0 : _a.isMathWallet);\n      return new Promise(resolve => {\n        function listener() {\n          var _a;\n\n          window.removeEventListener('load', listener);\n          resolve(!!((_a = window.solana) === null || _a === void 0 ? void 0 : _a.isMathWallet));\n        }\n\n        window.addEventListener('load', listener);\n      });\n    });\n  }\n\n  connect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (this.connected || this.connecting) return;\n        this._connecting = true;\n        if (!(yield this.ready())) throw new WalletNotReadyError();\n        const wallet = window.solana;\n        let account;\n\n        try {\n          // @TODO: handle if popup is blocked\n          account = yield wallet.getAccount();\n        } catch (error) {\n          throw new WalletAccountError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        let publicKey;\n\n        try {\n          publicKey = new PublicKey(account);\n        } catch (error) {\n          throw new WalletPublicKeyError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        window.addEventListener('message', this._messaged);\n        this._wallet = wallet;\n        this._publicKey = publicKey;\n        this.emit('connect');\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      } finally {\n        this._connecting = false;\n      }\n    });\n  }\n\n  disconnect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._wallet) {\n        window.removeEventListener('message', this._messaged);\n        this._wallet = null;\n        this._publicKey = null;\n      }\n\n      this.emit('disconnect');\n    });\n  }\n\n  signTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const wallet = this._wallet;\n        if (!wallet) throw new WalletNotConnectedError();\n\n        try {\n          return (yield wallet.signTransaction(transaction)) || transaction;\n        } catch (error) {\n          throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n  signAllTransactions(transactions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const wallet = this._wallet;\n        if (!wallet) throw new WalletNotConnectedError();\n\n        try {\n          return (yield wallet.signAllTransactions(transactions)) || transactions;\n        } catch (error) {\n          throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["../src/adapter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseSignerWalletAdapter, WalletAccountError, WalletDisconnectedError, WalletNotConnectedError, WalletNotReadyError, WalletPublicKeyError, WalletSignTransactionError, } from '@solana/wallet-adapter-base';\nimport { PublicKey } from '@solana/web3.js';\nexport class MathWalletAdapter extends BaseSignerWalletAdapter {\n    constructor(config = {}) {\n        super();\n        this._messaged = (event) => {\n            const data = event.data;\n            if (data && data.origin === 'mathwallet_internal' && data.type === 'lockStatusChanged' && !data.payload) {\n                this._disconnected();\n            }\n        };\n        this._disconnected = () => {\n            if (this._wallet) {\n                window.removeEventListener('message', this._messaged);\n                this._wallet = null;\n                this._publicKey = null;\n                this.emit('error', new WalletDisconnectedError());\n                this.emit('disconnect');\n            }\n        };\n        this._connecting = false;\n        this._wallet = null;\n        this._publicKey = null;\n    }\n    get publicKey() {\n        return this._publicKey;\n    }\n    get connecting() {\n        return this._connecting;\n    }\n    ready() {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof window === 'undefined' || typeof document === 'undefined')\n                return false;\n            if (document.readyState === 'complete')\n                return !!((_a = window.solana) === null || _a === void 0 ? void 0 : _a.isMathWallet);\n            return new Promise((resolve) => {\n                function listener() {\n                    var _a;\n                    window.removeEventListener('load', listener);\n                    resolve(!!((_a = window.solana) === null || _a === void 0 ? void 0 : _a.isMathWallet));\n                }\n                window.addEventListener('load', listener);\n            });\n        });\n    }\n    connect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                if (this.connected || this.connecting)\n                    return;\n                this._connecting = true;\n                if (!(yield this.ready()))\n                    throw new WalletNotReadyError();\n                const wallet = window.solana;\n                let account;\n                try {\n                    // @TODO: handle if popup is blocked\n                    account = yield wallet.getAccount();\n                }\n                catch (error) {\n                    throw new WalletAccountError(error === null || error === void 0 ? void 0 : error.message, error);\n                }\n                let publicKey;\n                try {\n                    publicKey = new PublicKey(account);\n                }\n                catch (error) {\n                    throw new WalletPublicKeyError(error === null || error === void 0 ? void 0 : error.message, error);\n                }\n                window.addEventListener('message', this._messaged);\n                this._wallet = wallet;\n                this._publicKey = publicKey;\n                this.emit('connect');\n            }\n            catch (error) {\n                this.emit('error', error);\n                throw error;\n            }\n            finally {\n                this._connecting = false;\n            }\n        });\n    }\n    disconnect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._wallet) {\n                window.removeEventListener('message', this._messaged);\n                this._wallet = null;\n                this._publicKey = null;\n            }\n            this.emit('disconnect');\n        });\n    }\n    signTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const wallet = this._wallet;\n                if (!wallet)\n                    throw new WalletNotConnectedError();\n                try {\n                    return (yield wallet.signTransaction(transaction)) || transaction;\n                }\n                catch (error) {\n                    throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n                }\n            }\n            catch (error) {\n                this.emit('error', error);\n                throw error;\n            }\n        });\n    }\n    signAllTransactions(transactions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const wallet = this._wallet;\n                if (!wallet)\n                    throw new WalletNotConnectedError();\n                try {\n                    return (yield wallet.signAllTransactions(transactions)) || transactions;\n                }\n                catch (error) {\n                    throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n                }\n            }\n            catch (error) {\n                this.emit('error', error);\n                throw error;\n            }\n        });\n    }\n}\n//# sourceMappingURL=adapter.js.map"]},"metadata":{},"sourceType":"module"}