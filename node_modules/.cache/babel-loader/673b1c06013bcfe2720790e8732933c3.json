{"ast":null,"code":"import { computed, ref, toRefs } from 'vue';\nimport { useAutoresizeTextarea, useCountCharacterLimit, useSlug } from '@/composables';\nimport { sendTweet } from '@/api'; // Props.\n\nexport default {\n  props: {\n    forcedTopic: String\n  },\n  emits: ['added'],\n\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    expose();\n    const props = __props;\n    const {\n      forcedTopic\n    } = toRefs(props); // Form data.\n\n    const content = ref('');\n    const topic = ref('');\n    const slugTopic = useSlug(topic);\n    const effectiveTopic = computed(() => forcedTopic.value ?? slugTopic.value); // Auto-resize the content's textarea.\n\n    const textarea = ref();\n    useAutoresizeTextarea(textarea); // Character limit / count-down.\n\n    const characterLimit = useCountCharacterLimit(content, 280);\n    const characterLimitColour = computed(() => {\n      if (characterLimit.value < 0) return 'text-red-500';\n      if (characterLimit.value <= 10) return 'text-yellow-500';\n      return 'text-gray-400';\n    }); // Permissions.\n\n    const connected = ref(true); // TODO: Check connected wallet.\n\n    const canTweet = computed(() => content.value && characterLimit.value > 0); // Actions.\n\n    const send = async () => {\n      if (!canTweet.value) return;\n      const tweet = await sendTweet(effectiveTopic.value, content.value);\n      emit('added', tweet);\n      topic.value = '';\n      content.value = '';\n    };\n\n    const __returned__ = {\n      props,\n      forcedTopic,\n      content,\n      topic,\n      slugTopic,\n      effectiveTopic,\n      textarea,\n      characterLimit,\n      characterLimitColour,\n      connected,\n      canTweet,\n      emit,\n      send,\n      computed,\n      ref,\n      toRefs,\n      useAutoresizeTextarea,\n      useCountCharacterLimit,\n      useSlug,\n      sendTweet\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n\n};","map":{"version":3,"sources":["/home/magma/solana-twitter/app/src/components/TweetForm.vue"],"names":[],"mappings":"AACA,SAAS,QAAT,EAAmB,GAAnB,EAAwB,MAAxB,QAAsC,KAAtC;AACA,SAAS,qBAAT,EAAgC,sBAAhC,EAAwD,OAAxD,QAAuE,eAAvE;AACA,SAAS,SAAT,QAA0B,OAA1B,C,CAEA;;;;;;;;;;;;;;AAIA,UAAM;AAAE,MAAA;AAAF,QAAkB,MAAM,CAAC,KAAD,CAA9B,C,CAEA;;AACA,UAAM,OAAO,GAAG,GAAG,CAAC,EAAD,CAAnB;AACA,UAAM,KAAK,GAAG,GAAG,CAAC,EAAD,CAAjB;AACA,UAAM,SAAS,GAAG,OAAO,CAAC,KAAD,CAAzB;AACA,UAAM,cAAc,GAAG,QAAQ,CAAC,MAAM,WAAW,CAAC,KAAZ,IAAqB,SAAS,CAAC,KAAtC,CAA/B,C,CAEA;;AACA,UAAM,QAAQ,GAAG,GAAG,EAApB;AACA,IAAA,qBAAqB,CAAC,QAAD,CAArB,C,CAEA;;AACA,UAAM,cAAc,GAAG,sBAAsB,CAAC,OAAD,EAAU,GAAV,CAA7C;AACA,UAAM,oBAAoB,GAAG,QAAQ,CAAC,MAAM;AACxC,UAAI,cAAc,CAAC,KAAf,GAAuB,CAA3B,EAA8B,OAAO,cAAP;AAC9B,UAAI,cAAc,CAAC,KAAf,IAAwB,EAA5B,EAAgC,OAAO,iBAAP;AAChC,aAAO,eAAP;AACH,KAJoC,CAArC,C,CAMA;;AACA,UAAM,SAAS,GAAG,GAAG,CAAC,IAAD,CAArB,C,CAA4B;;AAC5B,UAAM,QAAQ,GAAG,QAAQ,CAAC,MAAM,OAAO,CAAC,KAAR,IAAiB,cAAc,CAAC,KAAf,GAAuB,CAA/C,CAAzB,C,CAEA;;AAEA,UAAM,IAAI,GAAG,YAAY;AACrB,UAAI,CAAE,QAAQ,CAAC,KAAf,EAAsB;AACtB,YAAM,KAAK,GAAG,MAAM,SAAS,CAAC,cAAc,CAAC,KAAhB,EAAuB,OAAO,CAAC,KAA/B,CAA7B;AACA,MAAA,IAAI,CAAC,OAAD,EAAU,KAAV,CAAJ;AACA,MAAA,KAAK,CAAC,KAAN,GAAc,EAAd;AACA,MAAA,OAAO,CAAC,KAAR,GAAgB,EAAhB;AACH,KAND","sourcesContent":["<script setup>\nimport { computed, ref, toRefs } from 'vue'\nimport { useAutoresizeTextarea, useCountCharacterLimit, useSlug } from '@/composables'\nimport { sendTweet } from '@/api'\n\n// Props.\nconst props = defineProps({\n    forcedTopic: String,\n})\nconst { forcedTopic } = toRefs(props)\n\n// Form data.\nconst content = ref('')\nconst topic = ref('')\nconst slugTopic = useSlug(topic)\nconst effectiveTopic = computed(() => forcedTopic.value ?? slugTopic.value)\n\n// Auto-resize the content's textarea.\nconst textarea = ref()\nuseAutoresizeTextarea(textarea)\n\n// Character limit / count-down.\nconst characterLimit = useCountCharacterLimit(content, 280)\nconst characterLimitColour = computed(() => {\n    if (characterLimit.value < 0) return 'text-red-500'\n    if (characterLimit.value <= 10) return 'text-yellow-500'\n    return 'text-gray-400'\n})\n\n// Permissions.\nconst connected = ref(true) // TODO: Check connected wallet.\nconst canTweet = computed(() => content.value && characterLimit.value > 0)\n\n// Actions.\nconst emit = defineEmits(['added'])\nconst send = async () => {\n    if (! canTweet.value) return\n    const tweet = await sendTweet(effectiveTopic.value, content.value)\n    emit('added', tweet)\n    topic.value = ''\n    content.value = ''\n}\n</script>\n\n<template>\n    <div v-if=\"connected\" class=\"px-8 py-4 border-b\">\n\n        <!-- Content field. -->\n        <textarea\n            ref=\"textarea\"\n            rows=\"1\"\n            class=\"text-xl w-full focus:outline-none resize-none mb-3\"\n            placeholder=\"What's happening?\"\n            v-model=\"content\"\n        ></textarea>\n\n        <div class=\"flex flex-wrap items-center justify-between -m-2\">\n\n            <!-- Topic field. -->\n            <div class=\"relative m-2 mr-4\">\n                <input\n                    type=\"text\"\n                    placeholder=\"topic\"\n                    class=\"text-pink-500 rounded-full pl-10 pr-4 py-2 bg-gray-100\"\n                    :value=\"effectiveTopic\"\n                    :disabled=\"forcedTopic\"\n                    @input=\"topic = $event.target.value\"\n                >\n                <div class=\"absolute left-0 inset-y-0 flex pl-3 pr-2\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 m-auto\" :class=\"effectiveTopic ? 'text-pink-500' : 'text-gray-400'\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                        <path fill-rule=\"evenodd\" d=\"M9.243 3.03a1 1 0 01.727 1.213L9.53 6h2.94l.56-2.243a1 1 0 111.94.486L14.53 6H17a1 1 0 110 2h-2.97l-1 4H15a1 1 0 110 2h-2.47l-.56 2.242a1 1 0 11-1.94-.485L10.47 14H7.53l-.56 2.242a1 1 0 11-1.94-.485L5.47 14H3a1 1 0 110-2h2.97l1-4H5a1 1 0 110-2h2.47l.56-2.243a1 1 0 011.213-.727zM9.03 8l-1 4h2.938l1-4H9.031z\" clip-rule=\"evenodd\" />\n                    </svg>\n                </div>\n            </div>\n            <div class=\"flex items-center space-x-6 m-2 ml-auto\">\n\n                <!-- Character limit. -->\n                <div :class=\"characterLimitColour\">\n                    {{ characterLimit }} left\n                </div>\n\n                <!-- Tweet button. -->\n                <button\n                    class=\"text-white px-4 py-2 rounded-full font-semibold\" :disabled=\"! canTweet\"\n                    :class=\"canTweet ? 'bg-pink-500' : 'bg-pink-300 cursor-not-allowed'\"\n                    @click=\"send\"\n                >\n                    Tweet\n                </button>\n            </div>\n        </div>\n    </div>\n\n    <div v-else class=\"px-8 py-4 bg-gray-50 text-gray-500 text-center border-b\">\n        Connect your wallet to start tweeting...\n    </div>\n</template>\n"]},"metadata":{},"sourceType":"module"}